# template_config.yaml - contains input variables needed for generating
# Cloudformation templates with variable inputs.
---
  # globals - set of globaly scoped variables
  globals:
    description: "Infrastructure from code!"

  # template - set of Cloudformation specific inputs
  template:
    # **************************************************************************
    # this initial set of configs need to be provided as they are based on
    # your target environment.  The ami-id was created previously in your lab...
    vpc_cidr: "10.23.0.0/16" # base cidr for the new vpc, subnet cidrs are calculated for this.
    key_pair_name: "MyKey" # key-pair incase you want to ssh on in
    availability_zones: # availability zones we are going to launch the instances into
      - "us-west-2a"
      - "us-west-2b"
      - "us-west-2c"
    # **************************************************************************

    public_subnets_per_az: 1 # number of public subnets in each availability zone
    private_subnets_per_az: 2 # number of private subnets in each availability zone
    
    bastion: #configs for creating bastion host
      ami_id: "ami-7172b611" # id of the ami for launching
      instance_type: "t2.micro" # size of the instance
      desired_capacity: "2" # how many instances do we need
      min_capacity: "1" # what is the minimun we can run
      max_capacity: "3" # how many is too many

      security_group: # set of configs for the instance security group
        ingress:
          -
            ip_protocol: 'tcp'
            from_port: '22'
            to_port: '22'
            cidr_ip: '0.0.0.0/0'

      # user data for the new instances
      user_data: |

    asg: # set of configs for creating the asg
      ami_id: "ami-01055f31" #Bitnami LAMP stack
      key_pair_name: "MyKey" # key-pair incase you want to ssh on in
      instance_type: "t2.micro" # size of the instance
      desired_capacity: "2" # how many instances do we need
      min_capacity: "1" # what is the minimun we can run
      max_capacity: "3" # how many is too many

      security_group: # set of configs for the instance security group
        ingress:
          -
            ip_protocol: 'tcp'
            from_port: '80'
            to_port: '80'
            cidr_ip: '0.0.0.0/0'
#          -
            #ip_protocol: 'tcp'
            #from_port: '22'
            #to_port: '22'
            #cidr_ip: '0.0.0.0/0'
            #security_group: "bastion"

      # user data for the new instances
      user_data: |


    elb: # set of configs for the new Elastic Load Balancer
      output_dns: true
      health_check: # used by elb to detect if an instance is healthy
        target: "HTTP:80/"
        healthy_threshold: "2"
        unhealthy_threshold: "5"
        interval: "20"
        timeout: "15"

      listener: # used for proxying request from the elb to the instances
        load_balancer_port: "80"
        instance_port: "80"
        protocol: "HTTP"
        instance_protocol: "HTTP"

      security_group: # set of configs for the elb security group
        ingress:
          -
            ip_protocol: 'tcp'
            from_port: '80'
            to_port: '80'
            cidr_ip: '0.0.0.0/0'
